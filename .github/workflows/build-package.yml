name: build-package

# Controls when the workflow will run
on:
  repository_dispatch:
    types:
      - webhook
      - '**'
  
  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Telegram Alert Start
        shell: bash
        run: |
          echo ${{ runner.name }}
          echo ${{ github.action }}
          echo ${{ github.action_path }}
          echo ${{ github.action_repository }}
          echo ${{ github.actions }}
          echo ${{ github.actor }}
          echo ${{ github.api_url }}
          echo ${{ github.base_ref }}
          echo ${{ github.env }}
          echo ${{ github.event_name }}
          echo ${{ github.event_path }}
          echo ${{ github.graphql_url }}
          echo ${{ github.head_ref }}
          echo ${{ github.job }}
          echo ${{ github.path }}
          echo ${{ github.ref }}
          echo ${{ github.ref_name }}
          echo ${{ github.repository }}
          echo ${{ github.step_summary }}
          echo ${{ github.workflow }}
          echo ${{ runner.arch }}
          echo ${{ runner.name }}
          echo ${{ runner.tool_cache }}
          echo ${{ github.repository }}
          echo ${{ github.actor }}
          echo ${{ github.event_name }}
          echo ${{ github.job }}
          echo ${{ github.ref_name }}
          echo ${{ github.workflow }}
          echo ${{ runner.name }}
          echo ${{ github.action }}
          echo "1"
          echo ${{ github.graphql_url }}
          echo ${{ github.head_ref }}
          echo ${{ github.job }}
          echo ${{ github.ref  }}
          echo ${{ github.ref_name }}
          echo ${{ github.path }}
          echo ${{ github.run_attempt }}
          echo ${{ github.server_url }}
          echo "2"
          echo ${{ github.repository }}
          echo ${{ github.ref_name }}
          echo ${{ github.action_path }}
          echo ${{ github.action_ref }}
          echo ${{ github.action_repository }}
          echo ${{ github.action_status }}
          echo ${{ github.actor }}
          echo ${{ github.api_url }}
          echo ${{ github.base_ref }}
          echo ${{ github.env }}
          echo "3"
          echo ${{ github.event }}
          echo ${{ github.event_name }}
          echo ${{ github.event_path }}
          echo ${{ github.graphql_url }}
          echo ${{ github.head_ref }}
          echo ${{ github.job }}
          echo ${{ github.ref }}
          echo "4"
          echo ${{ github.ref_name }}
          echo ${{ github.path }}
          echo ${{ github.run_attempt }}
          echo ${{ github.server_url }}
          curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_TESTE }}", "text": "Criando ${{ env.pkgbuild_folder }} Eviado por ${{ github.actor }}", "disable_notification": false}' ${{ secrets.MESSAGE_BOT_KEY }}
      
      - name: echo PayLoads
        run: |
          echo "url: ${{ github.event.client_payload.url }}"
          echo "branch: ${{ github.event.client_payload.branch }}"
      - name: Makepkg Build and Check
        id: makepkg
        # You may pin to the exact commit or the version.
        uses: BigLinux-Package-Build/build-package@main
        with:
          package: pkgbuild
          branch: stable
          gpg-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.PASSPHRASE }}
          
      ## Tmate ##
      #- name: Setup tmate session
        #uses: mxschmitt/action-tmate@v3
        
      - name: Publish Package
        shell: bash
        run: |
          release=$(find . -name *.zst | cut -d "/" -f2)
          echo ${{ github.token }} | gh auth login --with-token
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          ls -lh
          gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release from ${{ github.event.client_payload.url }}" || echo "release already exists"
          GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}
          for i in .zst .sig .tar .md5; do
          find -iname "*$i" -exec gh release upload ${release} --repo ${GITHUB_REPOSITORY} --clobber {} \;
          done
          
      - name: Prepare Upload
        shell: bash
        run: |
          echo "## ssh setup"
          mkdir -p /home/runner/.ssh
          touch /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          #ssh-agent -a /tmp/ssh_agent.sock > /dev/null
       
      - name: Push to Repo
        shell: bash
        run: |
          echo "${{ secrets.PKGBUILD_KEY }}" >> /home/runner/.ssh/github_actions
          eval `ssh-agent -s`
          ssh-add /home/runner/.ssh/github_actions
          ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} ${{ secrets.PKGBUILD_HOST }} >> /home/runner/.ssh/known_hosts
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          ls -lh
          if [ ${{ github.event.client_payload.branch }} = "stable" ];then branch=stable; else branch=testing; fi
          for i in *.zst *.sig *.tar *.md5; do
          test -e $i && rsync -vaPpz -e "ssh -p ${{ secrets.PKGBUILD_PORT }}" $i ${{ secrets.PKGBUILD_USER }}@${{ secrets.PKGBUILD_HOST }}:${{ secrets.PKGBUILD_DIR }}/$branch
          done
          exit 0
          
      #- name: Telegram Alert End
        #shell: bash
        #run: |
          #curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "Pacote: ${{ env.pkgbuild_folder }} criado e enviado a partir do branch ${{ github.ref_name }}", "disable_notification": true}' ${{ secrets.MESSAGE_BOT_KEY }}
          
      #- name: Telegram Alert Fail
        #if: ${{ failure() || cancelled() }}
        #run: |
          #curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "FALHA ao criar Pacote: ${{ env.pkgbuild_folder }} a partir do branch ${{ github.ref_name }}, link do erro: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID", "disable_notification": true}' ${{ secrets.MESSAGE_BOT_KEY }}
          
        ## Tmate ##
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3 
          
        
#      - name: upload-cdn77
#        shell: bash -O extglob {0}
#        run: |
#          # if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#          if [ -z "${{ inputs.cdn77-host }}" ] || [ -z "${{ inputs.cdn77-user }}" ] || [ -z "${{ inputs.cdn77-pwd }}" ]; then 
#            echo "## not (all) credentials given for cdn77 upload"
#            exit 0
#          fi
#          
#          echo "## cdn77 upload"
#          
#          ssh-keyscan -t rsa ${{ inputs.cdn77-host }} >> /home/runner/.ssh/known_hosts
#          ## create target dir
#          sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP --stats -e ssh ${{ inputs.edition }} \
#            ${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/
#          # upload
#          sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP \
#            --stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
#            ${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/${{ inputs.edition }}/${{ inputs.version }}/
