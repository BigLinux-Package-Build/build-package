name: Build Proton TKG

on:
  repository_dispatch:
    types:
      - TKG/proton
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      volumes:
        - /imagegeneration:/lixo/imagegeneration
        - /opt:/lixo/opt
        - /usr:/lixo/usr

    steps:
      - uses: actions/checkout@v2
      
      - name: Clean System
        shell: bash -O extglob {0}
        run: |
          echo "Clean System"
          df -h
          rm -rf /__t
          rm -rf \
          /lixo/imagegeneration \
          /lixo/opt/az \
          /lixo/opt/ghc \
          /lixo/opt/pipx \
          /lixo/opt/google \
          /lixo/opt/microsoft \
          /lixo/opt/hostedtoolcache \
          /lixo/usr/lib/gcc \
          /lixo/usr/lib/llvm* \
          /lixo/var/lib/mysql \
          /lixo/var/lib/snapd \
          /lixo/var/lib/docker \
          /lixo/usr/lib/google* \
          /lixo/usr/lib/firefox \
          /lixo/usr/local/julia* \
          /lixo/usr/local/.ghcup \
          /lixo/usr/local/aws-cli \
          /lixo/usr/local/lib/android \
          /lixo/usr/local/aws-sam-cli \
          /lixo/usr/local/share/chromium \
          /lixo/usr/local/lib/node_modules \
          /lixo/usr/local/share/powershell \
          /lixo/usr/share/swift \
          /lixo/usr/share/dotnet
          echo "End Clean System"
          df -h
      
      - name: Compile
        run: |
          echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          pacman -Syu --noconfirm base-devel sudo git github-cli openssh gnupg coreutils rsync
          git clone https://github.com/Frogging-Family/wine-tkg-git.git
          
          useradd user -G wheel && echo "user ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          chown user -R ..
          chown user -R /tmp
          export CARGO_HOME="$PWD"
          cd wine-tkg-git/proton-tkg
          #su user -c "yes ''|PKGDEST=/tmp/proton-tkg makepkg --noconfirm -s"
          sed -i 's/_LOCAL_PRESET="valve-exp-bleeding"/_LOCAL_PRESET="valve-exp"/' ../wine-tkg-git/wine-tkg-scripts/prepare.sh
          su user -c "yes ''|makepkg --noconfirm -s"
          
      - name: sign package
        shell: bash -O extglob {0}
        run: |
          # "Assinar Pacote"
          cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg --batch --import &>/dev/null
          cd wine-tkg-git/proton-tkg
          for p in $(find $PWD -maxdepth 1 -regex '.*\.pkg\.tar\.\(xz\|zst\)'); do
            gpg --pinentry-mode loopback --passphrase "${{ secrets.PASSPHRASE }}" --detach-sign ${p}
          done
          
      - name: CheckSum
        shell: bash -O extglob {0}
        run: |
          # "Checksum"
          
          cd wine-tkg-git/proton-tkg
          echo '#!/bin/bash
          for i in $(ls *.zst); do md5sum $i >> $i.md5; done
          for i in $(ls *.sig | sed 's/.sig//'); do md5sum $i.sig >> $i.md5; done
          exit 0' > md5.sh
          bash md5.sh
      
      - name: Publish Package on GitHub
        shell: bash
        run: |
          release=$(find . -name *.zst | cut -d "/" -f2)
          echo ${{ github.token }} | gh auth login --with-token
          cd wine-tkg-git/proton-tkg
          ls -lh
          gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release from ${{ github.event.client_payload.url }}" || echo "release already exists"
          GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}
          for i in .zst .sig .tar .md5; do
          find -iname "*$i" -exec gh release upload ${release} --repo ${GITHUB_REPOSITORY} --clobber {} \;
          done
          
      - name: Push to Repo
        shell: bash
        run: |
          echo "## ssh setup"
          mkdir -p /home/runner/.ssh
          touch /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa
          ssh-agent -a /tmp/ssh_agent.sock > /dev/null
          echo "${{ secrets.PKGBUILD_KEY }}" >> /home/runner/.ssh/id_rsa
          eval `ssh-agent -s`
          ssh-add /home/runner/.ssh/id_rsa
          ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} ${{ secrets.PKGBUILD_HOST }} >> /home/runner/.ssh/known_hosts
          ip=$(ssh -o StrictHostKeyChecking=no ${{ secrets.PKGBUILD_USER }}@${{ secrets.PKGBUILD_HOST }} -p ${{ secrets.PKGBUILD_PORT }} 'echo $(curl -s ident.me) | tail -n1')
          ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} $ip >> /home/runner/.ssh/known_hosts
          
          cd wine-tkg-git/proton-tkg
          ls -lh
          if [ -n "$(echo ${{ github.event.client_payload.branch }} | grep stable )" ];then branch=stable; else branch=testing; fi
          for i in *.zst *.sig *.md5; do
          test -e $i && rsync -vapz -e "ssh -o StrictHostKeyChecking=no -p ${{ secrets.PKGBUILD_PORT }}" $i ${{ secrets.PKGBUILD_USER }}@$ip:${{ secrets.PKGBUILD_DIR }}/$branch/x86_64
          sleep 10
          done
          exit 0
          
      - name: Telegram Alert Fail
        # if: ${{ failure() || cancelled() }}
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "FALHA ao criar Pacote: ${{ github.event.action }} a partir do branch ${{ github.ref_name }}, link do erro: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}", "disable_notification": false}' ${{ secrets.MESSAGE_BOT_KEY }}
