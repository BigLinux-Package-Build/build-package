name: Build XanMod

# Controls when the workflow will run
on:
  repository_dispatch:
    types:
      - linux-xanmod*/*
      
  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: echo PayLoads
        run: |
          echo "url: ${{ github.event.client_payload.url }}"
          echo "branch: ${{ github.event.client_payload.branch }}"
          echo "xanmod: ${{ github.event.client_payload.xanmod }}"
          echo "xanmod version: ${{ github.event.client_payload.kver }}"
          echo "version rel: ${{ github.event.client_payload.xanver }}"
          
#       - name: Extra Command
#         shell: bash
#         run: |
#             module=$(find /usr/lib/modules -type d -iname "${{ github.event.client_payload.kver }}*xanmod*" | rev | cut -d "/" -f1 | rev) && sed -i "s/_linuxprefix=.*/_linuxprefix=linux-xanmod/;s/_extramodules=.*/_extramodules=${module}/;s/_kernver=.*/_kernver=${module}/" PKGBUILD
#             
#              && 
#             
#             echo "module=$(find /usr/lib/modules -type d -iname "${{ github.event.client_payload.kver }}*xanmod*" | rev | cut -d "/" -f1 | rev)"
#             
#             sed -i "/_linuxprefix/{h;s/.*/module=$(find \/usr\/lib\/modules -type d -iname "${{ github.event.client_payload.kver }}*xanmod*" | rev | cut -d "\/" -f1 | rev)/;p;x;}" PKGBUILD
#             
#             sed -i 's/_linuxprefix=.*/_linuxprefix=linux-xanmod/;s/_extramodules=.*/_extramodules=${module}/;s/_kernver=.*/_kernver=${module}/' PKGBUILD
#             
#             
#             find="find \/usr\/lib\/modules -type d -iname "${{ github.event.client_payload.kver }}*xanmod*" | rev | cut -d "'"\/"'" -f1 | rev" && 
#             
#             sed -i '1i\' -e "module=$find" PKGBUILD
#             sed -i "/_linuxprefix/{h;s/.*/module=$find/;p;x;}" PKGBUILD
#             
#             o _extramodules precisa conter o endereço da pasta dos modulodos da versão do kernel
#             payload .kver tem o numero da versão do kernel
#             precisa fazer um find 6.0.7*xanmod* para encontrar o modulo, mas isso dentro do pkgbuild pq precisa estar com o kernel instalado
#             
#             precisa escrever dentro do pkgbuild a string:
#             
#             module=$(find /usr/lib/modules -type d -iname "${{ github.event.client_payload.kver }}*xanmod*" | rev | cut -d "/" -f1 | rev)
#             
#             interpretando o payload, então antes de mandar escrever, tem que pegar o payload e inputar
#             
#             sed  '/_linuxprefix/{h;s/.*/module=$('"$find"')/;p;x;}' PKGBUILD
#             isso escre em varias linhas, precisa escrever uma linha só
#             
#             find="find \/usr\/lib\/modules -type d -iname "${{ github.event.client_payload.kver }}*xanmod*" | rev | cut -d "'"\/"'" -f1 | rev"
#             && 
#             sed -i '1 imodule=$('"$find"')' PKGBUILD
#             && 


            # find="find \/usr\/lib\/modules -type d -iname "${{ github.event.client_payload.kver }}*xanmod*" | rev | cut -d "'"\/"'" -f1 | rev" && sed -i 's/_linuxprefix=.*/_linuxprefix='"${{ github.event.client_payload.xanmod }}"'/;s/_extramodules=.*/_extramodules=$('"$find"')/;s/_kernver=.*/_kernver=$('"$find"')/' PKGBUILD
            
            
            
      - name: Makepkg Build and Check
        id: makepkg
        # You may pin to the exact commit or the version.
        uses: BigLinux-Package-Build/build-package@main
        with:
          package: pkgbuild
          branch: stable
          gitbranch: ${{ github.event.client_payload.branch }}
          gpg-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.PASSPHRASE }}
          extrarepo: ${{ github.event.client_payload.extrarepo }}
          extracommand: find="find \/usr\/lib\/modules -type d -iname "${{ github.event.client_payload.kver }}*xanmod*" | rev | cut -d "'"\/"'" -f1 | rev" && sed -i 's/_linuxprefix=.*/_linuxprefix='"${{ github.event.client_payload.xanmod }}"'/;s/_extramodules=.*/_extramodules=$('"$find"')/;s/_kernver=.*/_kernver=$('"$find"')/' PKGBUILD && sed -i 's/<\/usr\/lib\/modules\/${_extraver}\/version/'"$find"'/;s/pkgrel=.*/pkgrel='"${{ github.event.client_payload.xanver }}"'/' PKGBUILD && sed -i 's/EXTRAMODULES=.*/EXTRAMODULES=$('"$find"')/;s/depmod.*/depmod $('"$find"')/' *.install 
          #&& sed -i '/pkgrel=/{p;s/.*/epoch=1/;}' PKGBUILD
          
      # # Tmate ##
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
        
      - name: Publish Package on GitHub
        shell: bash
        run: |
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          ls -lh
          
          #Release#
          source PKGBUILD
          release=${pkgname}-${pkgver}-${pkgrel}
          
          if [ -n "$(echo ${{ github.event.client_payload.url }} | grep https://github.com/biglinux/)" ]; then 
            echo ${{ secrets.TOKEN_RELEASE }} | gh auth login --with-token
            # token=${{ secrets.TOKEN_RELEASE }}
            repo=$(echo ${{ github.event.client_payload.url }} | sed 's|https://github.com/||')
          else
            echo ${{ github.token }} | gh auth login --with-token
            # token=${{ github.token }}
            repo=${{ github.repository }}
          fi
          
          gh release create ${release} --title ${release} --repo ${repo} --notes "automated release from ${{ github.event.client_payload.url }}" || echo "release already exists"
          GITHUB_LINK=https://github.com/${repo}/releases/download/${release}
          for i in .zst .sig .tar .md5; do
            find -iname "*$i" -exec gh release upload ${release} --repo ${repo} --clobber {} \;
          done
          
          #release=$(find . -name *.zst | cut -d "/" -f2)
          # echo ${{ github.token }} | gh auth login --with-token
          # gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release from ${{ github.event.client_payload.url }}" || echo "release already exists"
          #GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}
          # for i in .zst .sig .tar .md5; do
          #   find -iname "*$i" -exec gh release upload ${release} --repo ${GITHUB_REPOSITORY} --clobber {} \;
          # done
       
      - name: Push to Repo
        shell: bash
        run: |
          echo "## ssh setup"
          mkdir -p /home/runner/.ssh
          touch /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          #ssh-agent -a /tmp/ssh_agent.sock > /dev/null
          echo "${{ secrets.PKGBUILD_KEY }}" >> /home/runner/.ssh/github_actions
          eval `ssh-agent -s`
          ssh-add /home/runner/.ssh/github_actions
          ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} ${{ secrets.PKGBUILD_HOST }} >> /home/runner/.ssh/known_hosts
          
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          ls -lh
          if [ -n "$(echo ${{ github.event.client_payload.branch }} | grep stable )" ];then branch=stable; else branch=testing; fi
          for i in *.zst *.sig *.md5; do
          test -e $i && rsync -vapz -e "ssh -p ${{ secrets.PKGBUILD_PORT }}" $i ${{ secrets.PKGBUILD_USER }}@${{ secrets.PKGBUILD_HOST }}:${{ secrets.PKGBUILD_DIR }}/$branch
          sleep 10
          done
          exit 0
          
      #- name: Telegram Alert End
        #shell: bash
        #run: |
          #curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "Pacote: ${{ github.event.action }} criado e enviado a partir do branch ${{ github.ref_name }}", "disable_notification": true}' ${{ secrets.MESSAGE_BOT_KEY }}
          
      - name: Telegram Alert Fail
        if: ${{ failure() || cancelled() }}
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "FALHA ao criar Pacote: ${{ github.event.action }} a partir do branch ${{ github.ref_name }}, link do erro: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}", "disable_notification": false}' ${{ secrets.MESSAGE_BOT_KEY }}
          
        ## Tmate ##
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3 
          
        
#      - name: upload-cdn77
#        shell: bash -O extglob {0}
#        run: |
#          # if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#          if [ -z "${{ inputs.cdn77-host }}" ] || [ -z "${{ inputs.cdn77-user }}" ] || [ -z "${{ inputs.cdn77-pwd }}" ]; then 
#            echo "## not (all) credentials given for cdn77 upload"
#            exit 0
#          fi
#          
#          echo "## cdn77 upload"
#          
#          ssh-keyscan -t rsa ${{ inputs.cdn77-host }} >> /home/runner/.ssh/known_hosts
#          ## create target dir
#          sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP --stats -e ssh ${{ inputs.edition }} \
#            ${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/
#          # upload
#          sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP \
#            --stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
#            ${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/${{ inputs.edition }}/${{ inputs.version }}/
