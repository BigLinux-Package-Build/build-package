name: Build Mesa TKG

on:
  repository_dispatch:
    types:
      - TKG/mesa-tkg-git
      - TKG/mesa-tkg-stable
      
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'With TMATE'
        required: false
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: echo PayLoads
        run: |
          echo "type: ${{ github.event.client_payload.type }}"
          echo "url: ${{ github.event.client_payload.url }}"
          echo "branch: ${{ github.event.client_payload.branch }}"
          echo "extrarepo: ${{ github.event.client_payload.extrarepo }}"
          
      - name: Makepkg Build and Check
        id: makepkg
        uses: BigLinux-Package-Build/build-package@main
        with:
          package: pkgbuild
          branch: stable
          gitbranch: ${{ github.event.client_payload.branch }}
          gpg-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.PASSPHRASE }}
          extrarepo: ${{ github.event.client_payload.extrarepo }}
          tmate: ${{ inputs.debug_enabled }}
          repo-mirror: ${{ secrets.REPO_MIRROR }}
          repo-dev: ${{ secrets.REPO_DEV }}
          # extracommand: sed -i "$(sed -n '/provides=/{=;q}' PKGBUILD)s/)/ vulkan-swrast)/" PKGBUILD ; sed -i "$(sed -n '/conflicts=/{=;q}' PKGBUILD)s/)/ '"'vulkan-swrast'"')/" PKGBUILD ; sed -i "$(sed -n '/provides=/{=;2q}' PKGBUILD | tail -n1)s/)/ lib32-vulkan-swrast)/" PKGBUILD ; sed -i "$(sed -n '/conflicts=/{=;2q}' PKGBUILD | tail -n1)s/)/ '"'lib32-vulkan-swrast'"')/" PKGBUILD
          
      # # Tmate ##
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
          
      - name: Publish Package on GitHub
        shell: bash
        run: |
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          ls -lh
          
          #Release#
          source PKGBUILD
          release=${pkgname}-${pkgver}-${pkgrel}
          # if [ "${{ github.event.client_payload.type }}" = "stable" ];then
          #   release=mesa-tkg-stable
          # else
          #   release=mesa-tkg-git
          # fi
          
          if [ -n "$(echo ${{ github.event.client_payload.url }} | grep https://github.com/biglinux/)" ]; then
            echo ${{ secrets.TOKEN_RELEASE }} | gh auth login --with-token
            # token=${{ secrets.TOKEN_RELEASE }}
            repo=$(echo ${{ github.event.client_payload.url }} | sed 's|https://github.com/||')
          elif [ -n "$(echo ${{ github.event.client_payload.url }} | grep https://github.com/xivastudio/)" ]; then
            echo ${{ secrets.TOKEN_RELEASE }} | gh auth login --with-token
            # token=${{ secrets.TOKEN_RELEASE }}
            repo=$(echo ${{ github.event.client_payload.url }} | sed 's|https://github.com/||')
          else
            echo ${{ github.token }} | gh auth login --with-token
            # token=${{ github.token }}
            repo=${{ github.repository }}
          fi
          
          gh release create ${release} --title ${release} --repo ${repo} --notes "automated release from ${{ github.event.client_payload.url }}" || echo "release already exists"
          GITHUB_LINK=https://github.com/${repo}/releases/download/${release}
          for i in .zst .sig .tar .md5; do
            find -iname "*$i" -exec gh release upload ${release} --repo ${repo} --clobber {} \;
          done
          
      - name: Push to Repo
        shell: bash
        run: |
          echo "## ssh setup"
          mkdir -p /home/runner/.ssh
          touch /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          #ssh-agent -a /tmp/ssh_agent.sock > /dev/null
          echo "${{ secrets.PKGBUILD_KEY }}" >> /home/runner/.ssh/github_actions
          eval `ssh-agent -s`
          ssh-add /home/runner/.ssh/github_actions
          ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} ${{ secrets.PKGBUILD_HOST }} >> /home/runner/.ssh/known_hosts
          ip=$(ssh ${{ secrets.PKGBUILD_USER }}@${{ secrets.PKGBUILD_HOST }} -p ${{ secrets.PKGBUILD_PORT }} 'echo $(curl -s ident.me) | tail -n1')
          ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} $ip >> /home/runner/.ssh/known_hosts
          
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          ls -lh
          if [ -n "$(echo ${{ github.event.client_payload.branch }} | grep stable )" ];then branch=stable; else branch=testing; fi
          for i in *.zst *.sig *.md5; do
          test -e $i && rsync -vapz -e "ssh -p ${{ secrets.PKGBUILD_PORT }}" $i ${{ secrets.PKGBUILD_USER }}@$ip:${{ secrets.PKGBUILD_DIR }}/$branch/x86_64
          sleep 10
          done
          exit 0
          
      # - name: Telegram Alert End
      #   shell: bash
      #   run: |
      #     curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "Pacote: ${{ github.event.action }} criado e enviado a partir do branch ${{ github.ref_name }}", "disable_notification": true}' ${{ secrets.MESSAGE_BOT_KEY }}
          
      - name: Telegram Alert Fail
        # if: ${{ failure() || cancelled() }}
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "FALHA ao criar Pacote: ${{ github.event.action }} a partir do branch ${{ github.ref_name }}, link do erro: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}", "disable_notification": false}' ${{ secrets.MESSAGE_BOT_KEY }}
          
