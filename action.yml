name: 'BigLinux Package Action'
description: 'Builds Manjaro Packages'

inputs:
  package:
    description: 'PKGBUILD repo name'
    required: true
  source:
    description: 'custom package repo source'
    required: false
  branch:
    description: 'branch to build against'
    default: stable
    required: false
  custom-repo:
    description: 'custom repo'
    required: false
  multilib:
    description: 'build multilib package'
    required: false
    default: false
  repo:
    description: 'package repo'
    required: true
  gpg-key:
    descriptio: 'gpg signing key'
    required: true
  gpg-passphrase:
    description: 'gpg passphrase'
    required: true
  ssh-key:
    description: 'boxit user ssh private key'
    required: false
  extrarepo:
    description: 'extra repository to build package'
    required: false
  gitbranch:
    description: 'extra repository to build package'
    required: false
  extracommand:
    description: 'extra command to build package'
    required: false
  extrapackage:
    description: 'extra package to build'
    required: false
  tmate:
    description: 'run tmate'
    required: false
  repo-mirror:
    description: 'mirror to use in build'
    default: repo
    required: false
  repo-dev:
    description: 'developmente repository'
    required: false
    
runs:
  using: "composite"
  steps:
    - name: install build-dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install \
        build-essential \
        cmake \
        fakeroot \
        git \
        libarchive-dev \
        libarchive-tools \
        libcurl4-openssl-dev \
        libgpgme-dev \
        libssl-dev \
        zip \
        python3-pip
        sudo pip3 install meson
        sudo pip3 install ninja
        
    - name: install pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.1
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
        sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
        sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
        pushd pacman-${PACMAN_VERSION}
        sudo patch -p1 -i ../pacman-sync-first-option.patch
        sudo meson --prefix=/usr \
                    --buildtype=plain \
                    -Ddoc=disabled \
                    -Ddoxygen=enabled \
                    -Dscriptlet-shell=/usr/bin/bash \
                    -Dldconfig=/usr/bin/ldconfig \
                    build
        sudo meson compile -C build
        sudo meson install -C build
        popd
        sudo install -m644 pacman.conf /etc/pacman.conf
        sudo install -m644 makepkg.conf /etc/
        sudo mkdir -p /etc/pacman.d
        sudo touch /etc/pacman.d/mirrorlist
        sudo wget https://raw.githubusercontent.com/BigLinux-Package-Build/manjaro-mirror/main/mirrorlist -O /etc/pacman.d/mirrorlist
        popd
        sudo rm -rf pacman
        
        #add biglinux repository
        sudo sed -i '/\[core\]/{h;s/.*/\[biglinux-update-stable\]/;p;x;}' /etc/pacman.conf
        sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /etc/pacman.conf
        sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/update-stable\/$arch/;p;x;}' /etc/pacman.conf
        sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /etc/pacman.conf
        echo '
        [biglinux-'"${{ inputs.repo-dev }}"']
        SigLevel = PackageRequired
        Server = https://'"${{ inputs.repo-mirror }}"'.biglinux.com.br/'"${{ inputs.repo-dev }}"'/$arch' | sudo tee -a /etc/pacman.conf
        echo '
        [biglinux-testing]
        SigLevel = PackageRequired
        Server = https://'"${{ inputs.repo-mirror }}"'.biglinux.com.br/testing/$arch' | sudo tee -a /etc/pacman.conf
        echo '
        [biglinux-stable]
        SigLevel = PackageRequired
        Server = https://'"${{ inputs.repo-mirror }}"'.biglinux.com.br/stable/$arch' | sudo tee -a /etc/pacman.conf
    
    - name: install keyrings
      shell: bash
      run: |
        sudo install -dm755 /usr/share/pacman/keyrings/
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
        pushd manjaro-keyring
          sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        popd
        sudo rm -rf manjaro-keyring
        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo rm -rf archlinux-keyring
        sudo git clone --depth 1 https://github.com/biglinux/biglinux-keyring.git
        pushd biglinux-keyring
          sudo install -m0644 biglinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
        popd
        sudo rm -rf biglinux-keyring
                
        #sudo pacman-key --init
        #sudo pacman-key -r 45EC44879815E2A6
        #sudo pacman-key --lsign-key 45EC44879815E2A6
        #sudo pacman-key --populate archlinux manjaro biglinux
        
    - name: pull keys
      shell: bash
      run: |
        sudo git clone https://github.com/biglinux/biglinux-key.git
        sudo mkdir -p /etc/pacman.d/gnupg/
        sudo cp -r biglinux-key/usr/share/pacman/keyrings/* /etc/pacman.d/gnupg/
        sudo rm -r biglinux-key
        
    - name: install manjaro-chrootbuild
      shell: bash
      env:
        EXTRAREPO: ${{ inputs.extrarepo }}
        COMMIT: b3efa6f6929bfc7fc62328b64ab4ebc0800111ce
      run: |
        sudo git clone https://gitlab.manjaro.org/tools/development-tools/manjaro-chrootbuild
        pushd manjaro-chrootbuild
        sudo git checkout $COMMIT
        sudo ./install.sh
        echo 'PACKAGER="BigLinux Package Build <bigbruno@gmail.com>"' | sudo tee -a /etc/makepkg.conf > /dev/null
        popd
        sudo rm -rf manjaro-chrootbuild
        
        source <(curl -s https://gitlab.manjaro.org/packages/core/manjaro-release/-/raw/master/lsb-release)
        
        #add biglinux repository
        sudo sed -i '/\[core\]/{h;s/.*/\[biglinux-update-stable\]/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/update-stable\/$arch/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        echo '
        [biglinux-'"${{ inputs.repo-dev }}"']
        SigLevel = PackageRequired
        Server = https://'"${{ inputs.repo-mirror }}"'.biglinux.com.br/'"${{ inputs.repo-dev }}"'/$arch' | sudo tee -a /etc/chrootbuild/pacman.conf.x86_64
        echo '
        [biglinux-testing]
        SigLevel = PackageRequired
        Server = https://'"${{ inputs.repo-mirror }}"'.biglinux.com.br/testing/$arch' | sudo tee -a /etc/chrootbuild/pacman.conf.x86_64
        echo '
        [biglinux-stable]
        SigLevel = PackageRequired
        Server = https://'"${{ inputs.repo-mirror }}"'.biglinux.com.br/stable/$arch' | sudo tee -a /etc/chrootbuild/pacman.conf.x86_64
        
        sudo sed -i '/LocalFileSigLevel/{p;s/.*/ParallelDownloads = 8/;}' /etc/chrootbuild/pacman.conf.x86_64
        
        mirror=$(cat /etc/pacman.d/mirrorlist | head -n1 | awk '{print $3}' | sed -ne 's/\(manjaro\).*/\1/p')
        sudo sed -i "s|https://repo.manjaro.org/repo|${mirror}|" /usr/lib/manjaro-chrootbuild/util.sh
        
        # sudo sed -i 's|https://repo.manjaro.org/repo|https://mnvoip.mm.fcix.net/manjaro|' /usr/lib/manjaro-chrootbuild/util.sh
        #sudo sed -i 's|https://repo.manjaro.org/repo|https://mirror2.sandyriver.net/pub/manjaro|' /usr/lib/manjaro-chrootbuild/util.sh
        # sudo sed -i 's|https://repo.manjaro.org/repo|https://forksystems.mm.fcix.net/manjaro|' /usr/lib/manjaro-chrootbuild/util.sh
        # sudo sed -i 's|https://repo.manjaro.org/repo|https://ridgewireless.mm.fcix.net/manjaro|' /usr/lib/manjaro-chrootbuild/util.sh
        sudo sed -i '/-Syy/s/-Syy/-Syy git /' /usr/lib/manjaro-chrootbuild/util-chroot.sh
        
    # - name: Setup TMATE Session
    #   uses: mxschmitt/action-tmate@v3
    #   if: "${{ inputs.tmate == 'true' }}"
        
    - name: Clean System
      shell: bash
      run: |
        echo "Clean System"
        df -h
        sudo rm -rf \
          /imagegeneration \
          /opt/az \
          /opt/ghc \
          /opt/pipx \
          /opt/google \
          /opt/microsoft \
          /opt/hostedtoolcache \
          /usr/lib/gcc \
          /usr/lib/llvm* \
          /var/lib/mysql \
          /var/lib/snapd \
          /var/lib/docker \
          /usr/lib/google* \
          /usr/lib/firefox \
          /usr/local/julia* \
          /usr/local/.ghcup \
          /usr/local/aws-cli \
          /usr/local/lib/android \
          /usr/local/aws-sam-cli \
          /usr/local/share/chromium \
          /usr/local/lib/node_modules \
          /usr/local/share/powershell \
          /usr/share/swift \
          /usr/share/dotnet
          echo "End Clean System"
          df -h
      
    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
      if: "${{ inputs.tmate == 'true' }}"
      
    - name: Download Source
      if: "${{ inputs.tmate == '' }}"
      shell: bash
      run: |
        git clone ${{ github.event.client_payload.url }}.git
      
    - name: build package
      shell: bash
      if: "${{ inputs.tmate == '' }}"
      run: |
        # "build package"
        #download python-setuptools
        sudo pacman -Syw --noconfirm python-setuptools --cachedir ./local_pkgs/
        sudo mkdir -p /var/lib/chrootbuild/local_pkgs/
        sudo cp -a local_pkgs/* /var/lib/chrootbuild/local_pkgs/
        
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        
        #for i in $(find -type f -name PKGBUILD | sed 's/PKGBUILD//'); do
        #cd $i
        if [ -n "$(echo ${{ github.event.client_payload.url }} | grep https://github.com/biglinux/)" ]; then
        git checkout ${{ inputs.gitbranch }}
        sed -i '/source=/s/\.git"/\.git#branch=${{ inputs.gitbranch }}"/' PKGBUILD
        fi
        
        ${{ github.event.client_payload.command }}
        ${{ inputs.extracommand }}
        
        echo "branch_build=${{ inputs.branch }}"
        
        build_opt=("-H" "-p ." "-b ${{ inputs.branch }}" ) #"-i" "python-setuptools" )
        [[ ! -z "${{ inputs.custom-repo }}" ]] && build_opt+=("-k ${{ inputs.custom-repo }}")
        [[ "${{ inputs.multilib }}" == "true" ]] && build_opt+=("-m")
        #[[ -n "${{ inputs.extrapackage }}" ]] && build_opt+=("-i ${{ inputs.extrapackage }}")
        
        echo "cmd=chrootbuild ${build_opt[@]}"
        sudo chrootbuild ${build_opt[@]}
        
        #done
        
    - name: Rename Package
      shell: bash -O extglob {0}
      run: | 
        # "Rename Package"
        #for i in $(find -type f -name PKGBUILD | sed 's/PKGBUILD//'); do
        #cd $i
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        for i in *.zst; do if [ -n "$(ls $i | grep :)" ]; then mv $i $(echo $i | sed 's/:/-/'); fi; done
        #done
        
    - name: sign package
      shell: bash -O extglob {0}
      run: |
        # "Assinar Pacote"
        cat <(echo -e "${{ inputs.gpg-key }}") | gpg --batch --import &>/dev/null
        #for i in $(find -type f -name PKGBUILD | sed 's/PKGBUILD//'); do
        #cd $i
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        for p in $(find $PWD -maxdepth 1 -regex '.*\.pkg\.tar\.\(xz\|zst\)'); do
          gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg-passphrase }}" --detach-sign ${p}
        done
        #done
        
    ## Tmate ##
    #- name: Setup tmate session
    #  uses: mxschmitt/action-tmate@v3
    
    - name: CheckSum
      shell: bash -O extglob {0}
      run: |
        # "Checksum"
        #for i in $(find -type f -name PKGBUILD | sed 's/PKGBUILD//'); do
        #cd $i
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        echo '#!/bin/bash
        #file=$(find -type f -iname "*.zst" | cut -d "/" -f2)
        #for i in *.zst *.sig; do test -e $i && md5sum $i >> "$file.md5"; done
        for i in $(ls *.zst); do md5sum $i >> $i.md5; done
        for i in $(ls *.sig | sed 's/.sig//'); do md5sum $i.sig >> $i.md5; done
        exit 0' > md5.sh
        bash md5.sh
        #done
        
    #- name: prepare assets transaction
      #shell: bash -O extglob {0}
      #run: |
        #if [ -n "$(echo ${{ github.event.client_payload.url }} | grep https://github.com/biglinux/)" ]; then
        #pkgbuildfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        #cd $pkgbuildfolder
        ##source /var/lib/chrootbuild/build/${{ inputs.package }}/PKGBUILD
        #source PKGBUILD
        #tag=${pkgver}-${pkgrel}
        #for p in ${pkgname[@]}; do
          #name=$(find . -name ${p}-${tag}*.zst)
          #arch=$(echo ${name} | rev | cut -d- -f1 | rev | cut -d. -f1)
          #file=${p}-${tag}-${arch}
          #btf=${file}.yml # boxit transaction file
          #echo "sha256_pkg: $(sha256sum ${name} | cut -d' ' -f1)" > ${btf}
          #echo "sha256_sig: $(sha256sum ${name}.sig | cut -d' ' -f1)" >> ${btf}
          #echo "repository: ${{ inputs.repo }}" >> ${btf}
          #echo "branch: ${{ inputs.branch }}" >> ${btf}
          #tar -czvf ${file}.tar ./${file}*.zst ./${file}*.sig ./${btf}
        #done
        #echo "TAG=${tag}" >>$GITHUB_ENV
        
        #release=${pkgname}}-${{ env.TAG }}
        #echo ${{ github.token }} | gh auth login --with-token
        #gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"
        #GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}
        #gh release upload ${release} --repo ${GITHUB_REPOSITORY} --clobber ./*.zst ./*.sig ./*.tar
        
        #fi
